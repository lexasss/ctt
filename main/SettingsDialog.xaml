<Window x:Class="CTT.SettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:ctrls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:CTT"
        xmlns:inputs="clr-namespace:CTT.Inputs"
        mc:Ignorable="d"
        Title="CTT settings"
        Height="450"
        Width="600"
        Icon="/assets/images/icon.png"
        ResizeMode="NoResize"
        SizeToContent="Height"
        WindowStartupLocation="CenterScreen">
    
    <Window.Resources>
        <local:BrushToColorConverter x:Key="brush2color"/>
        <local:ListOfDoublesToStringConverter  x:Key="dbl2string"/>
        <local:PathUIConverter x:Key="pathUI"/>
        <local:InputTypeToBoolConverter x:Key="input2bool"/>
        <local:ItemIndexToSoundDeviceIndexConverter x:Key="item2sound"/>

        <ObjectDataProvider x:Key="inputTypes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="inputs:InputType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="orientType" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="ctrls:Orientation"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="toneType" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:ToneType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="soundDevices" MethodName="GetSoundDevices"
                            ObjectType="{x:Type local:TonePlayer}">
        </ObjectDataProvider>

        <Style TargetType="Separator">
            <Setter Property="Margin" Value="4"/>
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="Margin" Value="4"/>
        </Style>
        <Style x:Key="CloseButton" TargetType="Button">
            <Setter Property="MinWidth" Value="60"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="4"/>
        </Style>
        <Style x:Key="Iconic" TargetType="Button">
            <Setter Property="Width" Value="28"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="Color" TargetType="Button">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Width" Value="56"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Padding" Value="4,2"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="86"/>
        </Style>
        <Style TargetType="xctk:ColorPicker">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="86"/>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Width" Value="86"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="Gray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0"
                        Margin="4">
                <Grid>
                    <Label>Input</Label>
                    <ComboBox x:Name="cmbInput"
                              HorizontalAlignment="Right"
                              ItemsSource="{Binding Source={StaticResource inputTypes}}"
                              SelectedItem="{Binding Path=Input}">
                        <ComboBox.Resources>
                            <local:InputTypePresenceToBoolConverter x:Key="itp2bool"/>
                        </ComboBox.Resources>
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="IsEnabled" 
                                        Value="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={StaticResource itp2bool}}"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                </Grid>
                <Grid>
                    <Label IsEnabled="{Binding SelectedItem, ElementName=cmbInput, Mode=OneWay, Converter={StaticResource input2bool}, ConverterParameter=Keyboard}"
                           Content="Keyboard gain"/>
                    <TextBox x:Name="txbKeyboardGain"
                             IsEnabled="{Binding SelectedItem, ElementName=cmbInput, Mode=OneWay, Converter={StaticResource input2bool}, ConverterParameter=Keyboard}">
                        <TextBox.Text>
                            <Binding Path="KeyboardGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="0.01" Max="1" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>

                <Separator/>

                <Grid>
                    <Label>Orientation</Label>
                    <ComboBox HorizontalAlignment="Right"
                              ItemsSource="{Binding Source={StaticResource orientType}}"
                              SelectedItem="{Binding Path=Orientation}"/>
                </Grid>
                <Grid>
                    <Label>Field size, px</Label>
                    <TextBox x:Name="txbFieldSize">
                        <TextBox.Text>
                            <Binding Path="FieldSize" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="200" Max="1000" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Background color</Label>
                    <xctk:ColorPicker SelectedColor="{Binding BackgroundColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                    <!--Button x:Name="btnBackgroundColor" Style="{StaticResource Color}" Click="Color_Click">
                        <Rectangle Fill="{Binding BackgroundColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                    </Button-->
                </Grid>

                <Separator/>

                <Grid>
                    <Label>Line width, px</Label>
                    <TextBox x:Name="txbLineWidth">
                        <TextBox.Text>
                            <Binding Path="LineWidth" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="1" Max="60" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Line color</Label>
                    <xctk:ColorPicker SelectedColor="{Binding LineColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                    <!--Button x:Name="btnLineColor" Style="{StaticResource Color}" Click="Color_Click">
                        <Rectangle Fill="{Binding LineColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                    </Button-->
                </Grid>

                <Separator/>

                <Grid>
                    <Label>Safe zone threshold, px</Label>
                    <TextBox x:Name="txbFarThreshold">
                        <TextBox.Text>
                            <Binding Path="FarThreshold" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="20" Max="1000" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Line out-of-safe-zone width, px</Label>
                    <TextBox x:Name="txbFarLineWidth">
                        <TextBox.Text>
                            <Binding Path="FarLineWidth" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="1" Max="40" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Line out-of-safe-zone color</Label>
                    <xctk:ColorPicker SelectedColor="{Binding FarLineColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                    <!--Button x:Name="btnFarLineColor" Style="{StaticResource Color}" Click="Color_Click">
                        <Rectangle Fill="{Binding FarLineColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                    </Button-->
                </Grid>
            </StackPanel>

            <Label Grid.Column="1"
                   Background="SlateGray"
                   Width="1"
                   Margin="4"/>
            
            <StackPanel Grid.Column="2"
                        Margin="4">
                <Grid>
                    <Label>Lambdas</Label>
                    <TextBox x:Name="txbLambdas"
                             Width="200">
                        <TextBox.Text>
                            <Binding Path="Lambdas" UpdateSourceTrigger="LostFocus" Mode="TwoWay" Converter="{StaticResource dbl2string}">
                                <Binding.ValidationRules>
                                    <local:NonBlankRule ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="80"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"
                           VerticalAlignment="Center"
                           Content="Gains"/>
                    <Grid Grid.Column="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0" Grid.Column="0"
                               Content="Offset"
                               HorizontalAlignment="Center"/>
                        <TextBox x:Name="txbOffsetGain" Grid.Row="1" Grid.Column="0"
                                 Width="42"
                                 HorizontalAlignment="Center">
                            <TextBox.Text>
                                <Binding Path="OffsetGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                    <Binding.ValidationRules>
                                        <local:RangeRule Min="1" Max="50" ValidatesOnTargetUpdated="True"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Grid.Row="0" Grid.Column="1"
                               Content="Input"
                               HorizontalAlignment="Center"/>
                        <TextBox x:Name="txbInputGain" Grid.Row="1" Grid.Column="1"
                                 Width="42"
                                 HorizontalAlignment="Center">
                            <TextBox.Text>
                                <Binding Path="InputGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                    <Binding.ValidationRules>
                                        <local:RangeRule Min="1" Max="50" ValidatesOnTargetUpdated="True"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <Label Grid.Row="0" Grid.Column="2"
                               Content="Noise"
                               HorizontalAlignment="Center"/>
                        <TextBox x:Name="txbNoiseGain" Grid.Row="1" Grid.Column="2"
                                 Width="42"
                                 HorizontalAlignment="Center">
                            <TextBox.Text>
                                <Binding Path="NoiseGain" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                    <Binding.ValidationRules>
                                        <local:RangeRule Min="0.001" Max="1" ValidatesOnTargetUpdated="True"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                    </Grid>
                </Grid>

                <Separator/>

                <Grid>
                    <CheckBox x:Name="chlIsProperTimerVisible" Content="Show proper tracking timer highlighted in"
                              IsChecked="{Binding IsProperTrackingTimerVisible, Mode=TwoWay}"/>
                    <TextBox HorizontalAlignment="Right"
                             Padding="1"
                             Width="28"
                             Height="20"
                             IsEnabled="{Binding ElementName=chlIsProperTimerVisible, Path=IsChecked}">
                        <TextBox.Text>
                            <Binding Path="ProperTrackingDurationThreshold" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="5" Max="300" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <CheckBox Content="Show total tracking timer"
                          IsChecked="{Binding IsTrackingTimerVisible, Mode=TwoWay}"/>
                <CheckBox Content="Enabled old CTT software bugs"
                          IsChecked="{Binding IsOldCTTBugEnabled, Mode=TwoWay}"/>


                <Separator/>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.Resources>
                        <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                            <Setter Property="Width" Value="76"/>
                        </Style>
                        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Setter Property="Width" Value="76"/>
                        </Style>
                    </Grid.Resources>

                    <CheckBox Name="chkTonePlayer1_IsEnabled"
                              Grid.Row="0" Grid.Column="1"
                              Content="Tone #1"
                              IsChecked="{Binding TonePlayer1_IsEnabled, Mode=TwoWay}"/>
                    <CheckBox Name="chkTonePlayer2_IsEnabled"
                              Grid.Row="0" Grid.Column="2"
                              Content="Tone #2"
                              IsChecked="{Binding TonePlayer2_IsEnabled, Mode=TwoWay}"/>

                    <Label Grid.Row="1" Grid.Column="0">Max frequency, Hz</Label>
                    <TextBox x:Name="txbTonePlayer1_MaxFrequency"
                             Grid.Row="1" Grid.Column="1"
                             IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer1_IsEnabled}">
                        <TextBox.Text>
                            <Binding Path="TonePlayer1_MaxFrequency" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="100" Max="10000" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox x:Name="txbTonePlayer2_MaxFrequency"
                             Grid.Row="1" Grid.Column="2"
                             IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer2_IsEnabled}">
                        <TextBox.Text>
                            <Binding Path="TonePlayer2_MaxFrequency" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="100" Max="10000" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>

                    <Label Grid.Row="2" Grid.Column="0">Playback device</Label>
                    <ComboBox Grid.Row="2" Grid.Column="1"
                              HorizontalAlignment="Right"
                              IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer1_IsEnabled}"
                              ItemsSource="{Binding Source={StaticResource soundDevices}}"
                              SelectedIndex="{Binding TonePlayer1_SoundsDeviceIndex, Converter={StaticResource item2sound}}"/>
                    <ComboBox Grid.Row="2" Grid.Column="2"
                              HorizontalAlignment="Right"
                              IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer2_IsEnabled}"
                              ItemsSource="{Binding Source={StaticResource soundDevices}}"
                              SelectedIndex="{Binding TonePlayer2_SoundsDeviceIndex, Converter={StaticResource item2sound}}"/>

                    <Label Grid.Row="3" Grid.Column="0">Tone type</Label>
                    <ComboBox Grid.Row="3" Grid.Column="1" HorizontalAlignment="Right"
                              IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer1_IsEnabled}"
                              ItemsSource="{Binding Source={StaticResource toneType}}"
                              SelectedItem="{Binding TonePlayer1_ToneType}"/>
                    <ComboBox Grid.Row="3" Grid.Column="2" HorizontalAlignment="Right"
                              IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer2_IsEnabled}"
                              ItemsSource="{Binding Source={StaticResource toneType}}"
                              SelectedItem="{Binding TonePlayer2_ToneType}"/>

                    <Label Grid.Row="4" Grid.Column="0">Pulse duration, ms</Label>
                    <TextBox x:Name="txbTonePlayer1_PulseDuration"
                             Grid.Row="4" Grid.Column="1"
                             IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer1_IsEnabled}"
                             ToolTip="Set to 0 to keep the tone continuous">
                        <TextBox.Text>
                            <Binding Path="TonePlayer1_PulseDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="0" Max="500" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox x:Name="txbTonePlayer2_PulseDuration"
                             Grid.Row="4" Grid.Column="2"
                             IsEnabled="{Binding IsChecked, ElementName=chkTonePlayer2_IsEnabled}"
                             ToolTip="Set to 0 to keep the tone continuous">
                        <TextBox.Text>
                            <Binding Path="TonePlayer2_PulseDuration" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="0" Max="500" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>

            </StackPanel>
        </Grid>

        <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
            <Separator/>
            <Grid Margin="4,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="72"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Label Grid.Column="0"
                       VerticalAlignment="Center"
                       Content="Log folder"/>
                <TextBlock Grid.Column="1"
                           Text="{Binding LogFolder, Mode=OneWay, Converter={StaticResource pathUI}}"
                           Margin="8,1,8,0"
                           TextWrapping="Wrap"
                           FontFamily="Consolas"
                           VerticalAlignment="Center"/>
                <Button Grid.Column="2" Style="{StaticResource Iconic}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Content="..."
                        Click="SelectFolder_Click"/>
            </Grid>
            
            <WrapPanel HorizontalAlignment="Center"
                       Margin="0,8,0,0">
                <Button Content="Save"
                    IsDefault="True"
                    Click="Save_Click">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CloseButton}">
                            <Setter Property="IsEnabled" Value="false" />
                            <Style.Triggers>
                                <!-- Require the controls to be valid in order to press Save -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=txbLineWidth, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbFarLineWidth, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbFarThreshold, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbLambdas, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbKeyboardGain, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbOffsetGain, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbInputGain, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbNoiseGain, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbTonePlayer1_MaxFrequency, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbTonePlayer1_PulseDuration, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbTonePlayer2_MaxFrequency, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbTonePlayer2_PulseDuration, Path=(Validation.HasError)}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Style="{StaticResource CloseButton}" Content="Cancel"
                    IsCancel="True"/>
            </WrapPanel>
        </StackPanel>
    </Grid>
</Window>
