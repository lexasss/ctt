<Window x:Class="CTT.SettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:ctrls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:CTT"
        xmlns:inputs="clr-namespace:CTT.Inputs"
        mc:Ignorable="d"
        Title="Settings"
        Height="460"
        Width="270"
        Icon="/assets/images/icon.png"
        ResizeMode="NoResize"
        SizeToContent="Height"
        WindowStartupLocation="CenterScreen">
    
    <Window.Resources>
        <!--local:ColorBrushConverter x:Key="scb2brush"/-->
        <local:BrushToColorConverter x:Key="brush2color"/>
        <local:ListOfDoublesToStringConverter  x:Key="dbl2string"/>
        <local:PathUIConverter x:Key="pathUI"/>

        <ObjectDataProvider x:Key="inputTypes" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="inputs:InputType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="orientType" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="ctrls:Orientation"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style TargetType="Separator">
            <Setter Property="Margin" Value="4"/>
        </Style>
        <Style x:Key="CloseButton" TargetType="Button">
            <Setter Property="MinWidth" Value="60"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="4"/>
        </Style>
        <Style x:Key="Iconic" TargetType="Button">
            <Setter Property="Width" Value="28"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="Color" TargetType="Button">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="Width" Value="56"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="56"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
        <Style TargetType="xctk:ColorPicker">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="56"/>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="2"/>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0"
                    Margin="4">
            <Grid>
                <Label>Input</Label>
                <ComboBox Width="80"
                          HorizontalAlignment="Right"
                          ItemsSource="{Binding Source={StaticResource inputTypes}}"
                          SelectedItem="{Binding Path=Input}"/>
            </Grid>

            <Separator/>

            <Grid>
                <Label>Orientation</Label>
                <ComboBox Width="80"
                          HorizontalAlignment="Right"
                          ItemsSource="{Binding Source={StaticResource orientType}}"
                          SelectedItem="{Binding Path=Orientation}"/>
            </Grid>
            <Grid>
                <Label>Field size, px</Label>
                <TextBox x:Name="txbFieldSize">
                    <TextBox.Text>
                        <Binding Path="FieldSize" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="200" Max="1000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Background color</Label>
                <xctk:ColorPicker SelectedColor="{Binding BackgroundColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                <!--Button x:Name="btnBackgroundColor" Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding BackgroundColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button-->
            </Grid>
            
            <Separator/>
            
            <Grid>
                <Label>Line width, px</Label>
                <TextBox x:Name="txbLineWidth">
                    <TextBox.Text>
                        <Binding Path="LineWidth" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="1" Max="60" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Line color</Label>
                <xctk:ColorPicker SelectedColor="{Binding LineColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                <!--Button x:Name="btnLineColor" Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding LineColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button-->
            </Grid>

            <Separator/>
            
            <Grid>
                <Label>Safe zone threshold, px</Label>
                <TextBox x:Name="txbFarThreshold">
                    <TextBox.Text>
                        <Binding Path="FarThreshold" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="20" Max="1000" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Line out-of-safe-zone width, px</Label>
                <TextBox x:Name="txbFarLineWidth">
                    <TextBox.Text>
                        <Binding Path="FarLineWidth" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <local:RangeRule Min="1" Max="40" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
            <Grid>
                <Label>Line out-of-safe-zone color</Label>
                <xctk:ColorPicker SelectedColor="{Binding FarLineColor, Mode=TwoWay, Converter={StaticResource brush2color}}"/>
                <!--Button x:Name="btnFarLineColor" Style="{StaticResource Color}" Click="Color_Click">
                    <Rectangle Fill="{Binding FarLineColor, Mode=TwoWay, Converter={StaticResource scb2brush}}"/>
                </Button-->
            </Grid>

            <Separator/>
            
            <Grid>
                <Label>Lambdas</Label>
                <TextBox x:Name="txbLambdas"
                         Width="150">
                    <TextBox.Text>
                        <Binding Path="Lambdas" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" Converter="{StaticResource dbl2string}">
                            <Binding.ValidationRules>
                                <local:NonBlankRule ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </StackPanel>

        <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
            <Separator/>
            <Grid Margin="4,0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Label Grid.Row="0"
                       VerticalAlignment="Center"
                       Content="Log folder"/>
                <TextBlock Grid.Row="1"
                           Text="{Binding LogFolder, Mode=OneWay, Converter={StaticResource pathUI}}"
                           Margin="8,0"
                           TextWrapping="Wrap"
                           FontFamily="Consolas"
                           VerticalAlignment="Center"/>
                <Button Grid.Row="0" Style="{StaticResource Iconic}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Top"
                        Content="..."
                        Click="SelectFolder_Click"/>
            </Grid>
            
            <WrapPanel HorizontalAlignment="Center"
                       Margin="0,8,0,0">
                <Button Content="Save"
                    IsDefault="True"
                    Click="Save_Click">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CloseButton}">
                            <Setter Property="IsEnabled" Value="false" />
                            <Style.Triggers>
                                <!-- Require the controls to be valid in order to press Save -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=txbLineWidth, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbFarLineWidth, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbFarThreshold, Path=(Validation.HasError)}" Value="False" />
                                        <Condition Binding="{Binding ElementName=txbLambdas, Path=(Validation.HasError)}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Style="{StaticResource CloseButton}" Content="Cancel"
                    IsCancel="True"/>
            </WrapPanel>
        </StackPanel>
    </Grid>
</Window>
